#!/usr/bin/python3


import os
import re
from shutil import which
import subprocess
from urllib.parse import urlencode
import sys
import tempfile

PROJECTS_PATH = "/home/daze/Documents/Projects"
PROJECT_WHITELIST = [
    "ai-frontend",
    "inteliome-front-client",
]


def pr_template(
    notify_to: str | None = None,
    ticket_link: str | None = None,
    change_log: str | None = None,
):
    return f"""
<!--- Thank you for helping us out: your efforts mean a great deal to the project!. Please provide a general summary of your changes in the title above -->

## Overview
Please add a link to the Jira ticket associated with this PR.
- Ticket Link : {ticket_link}

## Checklist:
- [ ] Have you added an explanation of what your changes do and why you'd like us to include them?
- [ ] Have you written unit tests for your core changes, as applicable?
- [x] Have you successfully ran tests with your changes locally?
- [x] Are branch naming conventions followed ? i.e., <activity_type>/<Ticket-Number>_<Short-Description>. Please check https://poc-acl.atlassian.net/l/cp/fZZuf0ah for more details.

## Notify to
<!-- List of people who should be notified about the changes -->
- {notify_to}

## Change Log
<!-- Specify the changes list. -->
- {change_log}
"""


def find_project_folders():
    project_folders = []
    for folder in os.listdir(PROJECTS_PATH):
        if folder in PROJECT_WHITELIST:
            project_folders.append(folder)

    return project_folders


def check_dependencies():
    if not which("fzf"):
        raise SystemError("Cannot find 'fzf' installed on PATH.")


def fzf_prompt(choices=None, fzf_options="", delimiter="\n", label: str | None = None):
    if choices is None:
        choices = []

    if label is not None:
        fzf_options += f' --border-label="{label}" --border=top --border-label-pos=3'

    # convert a list to a string [ 1, 2, 3 ] => "1\n2\n3"
    choices_str = delimiter.join(map(str, choices))

    selection = []

    with tempfile.NamedTemporaryFile(delete=False) as input_file:
        with tempfile.NamedTemporaryFile(delete=False) as output_file:
            # Create a temp file with list entries as lines
            input_file.write(choices_str.encode("utf-8"))
            input_file.flush()

    # Invoke fzf externally and write to output file
    os.system(f'fzf {fzf_options} < "{input_file.name}" > "{output_file.name}"')

    # get selected options
    with open(output_file.name, encoding="utf-8") as f:
        for line in f:
            selection.append(line.strip("\n"))

    os.unlink(input_file.name)
    os.unlink(output_file.name)

    return selection


def get_issue_number(text: str):
    if text == "":
        raise Exception("No issue number, url or ID provided!")

    pattern = r"IP-\d+"

    matches = re.findall(pattern, text)

    if len(matches) > 1:
        return None
    elif len(matches) == 1:
        return matches[0]

    if text.isdigit():
        return f"IP-{text}"

    return None


def find_existing_worktree(isn: str):
    repositories = find_project_folders()

    worktree_paths = []
    for repository in repositories:
        if os.path.exists(f"{PROJECTS_PATH}/{repository}/{isn}"):
            worktree_paths.append(f"{repository}/{isn}")

    if worktree_paths == []:
        return None

    return worktree_paths


def create_worktree(isn: str):
    choosen_repo_path = fzf_prompt(
        find_project_folders(),
        label="Select a path to create worktree:",
    )

    if choosen_repo_path == []:
        raise Exception("No repository selected!")

    choosen_repo_path = choosen_repo_path[0]

    worktree_path = f"{PROJECTS_PATH}/{choosen_repo_path}"

    if os.path.exists(f"{worktree_path}/{isn}"):
        raise Exception("Worktree already exists for the issue number!")

    print("Pulling latest changes from origin/dev!")
    os.system(f"cd {worktree_path}/dev && git pull")

    print("Pruining worktrees!")
    os.system(f"cd {worktree_path} && git worktree prune")

    print(f"Creating worktree for {isn}!")
    os.system(f"cd {worktree_path} && git worktree add {isn}")

    print(
        f"Resetting the worktree to origin/dev and installing dependencies for {isn}!"
    )
    os.system(
        f"cd {worktree_path}/{isn} && git reset --hard origin/dev && cp ../.env.local . && pnpm install"
    )

    print(f"Launching tmux session for {isn}!")
    project_switcher(f"{choosen_repo_path}/{isn}")

    return choosen_repo_path


def project_chooser(path: str | None = None) -> tuple[str, str]:
    exist_on_multiple_projects = False
    if path:
        selected = path
    else:
        tickets = {}
        for directory in find_project_folders():
            os.system(f"cd {PROJECTS_PATH}/{directory} && git worktree prune")

            available_worktrees = os.listdir(
                f"{PROJECTS_PATH}/{directory}/.git/worktrees"
            )
            for worktree in available_worktrees:
                if worktree in tickets.keys():
                    tickets[worktree].append(directory)
                else:
                    tickets[worktree] = [directory]

        selected = fzf_prompt(choices=tickets.keys(), label="Select Project")

        if selected:
            selected = selected[0]
        else:
            raise Exception("No ticket selected!")

        if len(tickets[selected]) > 1:
            exist_on_multiple_projects = True
            project = fzf_prompt(
                choices=tickets[selected],
                label="Ticket found in multiple projects. Select one:",
            )

            if selected:
                selected = f"{project[0]}/{selected}"
            else:
                raise Exception("No project selected!")
        else:
            selected = f"{tickets[selected][0]}/{selected}"

    if not selected:
        sys.exit(0)

    selected_absolute = f"{PROJECTS_PATH}/{selected}"

    if exist_on_multiple_projects:
        session_name = selected.replace(".", "_")
    else:
        session_name = os.path.basename(selected_absolute).replace(".", "_")

    return selected_absolute, session_name


def project_switcher(path: str | None = None):
    selected_absolute, session_name = project_chooser(path)

    try:
        subprocess.check_call(["tmux", "has-session", "-t", session_name])
    except subprocess.CalledProcessError:
        print(f"Creating new tmux session for {session_name}!")
        subprocess.call(
            ["tmux", "new-session", "-d", "-s", session_name, "-c", selected_absolute]
        )

    subprocess.call(["tmux", "attach", "-t", session_name])


if __name__ == "__main__":
    if len(sys.argv) == 1:
        project_switcher()
    elif sys.argv[1] == "take":
        try:
            path = sys.argv[2]
        except IndexError:
            path, _ = project_chooser()

        os.system(f"cd {path} && fish")
    elif sys.argv[1] == "pr":
        # If current directory path contains the issue number, then open the PR page in the browser.
        isn = get_issue_number(os.getcwd())
        path = os.getcwd()

        if not isn:
            path, _ = project_chooser()
            isn = get_issue_number(path)

        os.chdir(path)

        # get the repository name from the git remote url
        repo = subprocess.check_output(
            ["git", "config", "--get", "remote.origin.url"], text=True
        ).strip()

        repo = repo.split(":")[1].replace(".git", "")

        title = subprocess.check_output(
            ["git", "log", "-1", "--pretty=%B"], text=True
        ).strip()

        try:
            change_log = title.split(":")[1].split("(")[0].strip()
        except IndexError:
            change_log = ""

        params = {
            "quick_pull": 1,
            "title": title,
            "body": pr_template(
                notify_to="@amitpatellis",
                ticket_link=f"https://yco.atlassian.net/browse/{isn}",
                change_log=change_log,
            ),
        }

        pr_url = f"https://github.com/{repo}/compare/dev...{isn}?{urlencode(params)}"

        print(f"{pr_url}")

        os.system(f"xdg-open {pr_url}")
    else:
        url = sys.argv[1]
        isn = get_issue_number(url)

        if isn is None:
            raise Exception("No issue number found in the URL!")

        existing_worktree = find_existing_worktree(isn)

        if existing_worktree is None:
            create_worktree(isn)
        elif len(existing_worktree) == 1:
            project_switcher(existing_worktree[0])
        else:
            choosen_repo = fzf_prompt(
                existing_worktree,
                label="Issue number exists in multiple repositories. Select one:",
            )
            project_switcher(choosen_repo[0])
